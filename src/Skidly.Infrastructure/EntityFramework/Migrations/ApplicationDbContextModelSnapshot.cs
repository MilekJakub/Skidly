// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skidly.Infrastructure.EntityFramework.Contexts;

#nullable disable

namespace Skidly.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Skidly.Domain.Aggregates.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.StudyArea", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("_userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("_userId");

                    b.ToTable("StudyAreas", (string)null);
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.StudyGoal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudyAreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_areaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category");

                    b.Property<DateTime?>("_deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("_expectedLearningTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExpectedLearningTime");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("StudyAreaId");

                    b.HasIndex("_areaId");

                    b.ToTable("StudyGoals", (string)null);
                });

            modelBuilder.Entity("Skidly.Domain.Entities.Pomodoro", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudyGoalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Duration");

                    b.Property<string>("_expectedDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExpectedDuration");

                    b.Property<string>("_goalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Topic");

                    b.HasKey("Id");

                    b.HasIndex("StudyGoalId");

                    b.HasIndex("_goalId");

                    b.ToTable("Pomodoros", (string)null);
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.StudyArea", b =>
                {
                    b.HasOne("Skidly.Domain.Aggregates.ApplicationUser", null)
                        .WithMany("StudyAreas")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Skidly.Domain.Aggregates.ApplicationUser", "_user")
                        .WithMany("_areas")
                        .HasForeignKey("_userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_user");
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.StudyGoal", b =>
                {
                    b.HasOne("Skidly.Domain.Aggregates.StudyArea", null)
                        .WithMany("Goals")
                        .HasForeignKey("StudyAreaId");

                    b.HasOne("Skidly.Domain.Aggregates.StudyArea", "_area")
                        .WithMany("_goals")
                        .HasForeignKey("_areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_area");
                });

            modelBuilder.Entity("Skidly.Domain.Entities.Pomodoro", b =>
                {
                    b.HasOne("Skidly.Domain.Aggregates.StudyGoal", null)
                        .WithMany("Pomodoros")
                        .HasForeignKey("StudyGoalId");

                    b.HasOne("Skidly.Domain.Aggregates.StudyGoal", "_goal")
                        .WithMany("_pomodoros")
                        .HasForeignKey("_goalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_goal");
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.ApplicationUser", b =>
                {
                    b.Navigation("StudyAreas");

                    b.Navigation("_areas");
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.StudyArea", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("_goals");
                });

            modelBuilder.Entity("Skidly.Domain.Aggregates.StudyGoal", b =>
                {
                    b.Navigation("Pomodoros");

                    b.Navigation("_pomodoros");
                });
#pragma warning restore 612, 618
        }
    }
}
